
#include "Sprite.h"
#include "SDL/SDL.h"
#include "SDL/SDL_image.h"
#include <string>


Sprite::Sprite(string filename, int x, int y, int w, int h)
{
	sprite = load_image(filename.c_str());
	xpos = x;
	ypos = y;
	width = w;
	height = h;
}
void Sprite::apply_surface(int x, int y, SDL_Surface* source, SDL_Surface* destination, SDL_Rect* clip){ //applies new surface
    //Holds offsets
    SDL_Rect shift;

    //Get offsets
    shift.x = x;
    shift.y = y;

    //Blit
    SDL_BlitSurface(source, clip, destination, &shift);
}

SDL_Surface * Sprite::load_image(std::string filename)
{
	//temporary storage for the image that's loaded
	SDL_Surface* loadedImage = NULL;

	//The optimized image that will be used
	SDL_Surface* optimizedImage = NULL;

	//Load the iamge
	loadedImage = IMG_Load(filename.c_str());
	//this is 24 bit so not good idea to use this b/c causes slowdown
	
	//if nothing went wrong in loading the image
	if(loadedImage!=NULL)
	{
		//create an optimized image in the same format as the screen (32 bit)
		optimizedImage = SDL_DisplayFormat(loadedImage);

	//Free the old image
	SDL_FreeSurface(loadedImage);

		if(optimizedImage!=NULL)
		{
			//Map the color key
			Uint32 colorkey = SDL_MapRGB( optimizedImage -> format,0xec,0x26,0x26);

			//Set all pizels of color R 0, G 0xFF, B 0xFF to be transparent
			SDL_SetColorKey(optimizedImage,SDL_SRCCOLORKEY, colorkey);
		}
	}
		return optimizedImage;
}

void
Sprite::handle_events ()
{
  //The mouse offsets
  int x = 0, y = 0;

  //If a mouse button was pressed
  if (event.type == SDL_MOUSEBUTTONDOWN)
    {
      //If the left mouse button was pressed
      if (event.button.button == SDL_BUTTON_LEFT)
	{
	  //Get the mouse offsets
	  x = event.button.x;
	  y = event.button.y;
apply_surface(x,y,gunshot,screen);
	  //If the mouse is over the button
	  if ((x > xpos) && (x < xpos + width) && (y > ypos)
	      && (y < ypos + height))
	    {
	     
apply_surface(xpos+(width/4),ypos+(height/4),explosionsheet,screen);
	    }
	}
    }

}
